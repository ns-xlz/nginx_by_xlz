// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: phxpf.proto

#ifndef PROTOBUF_phxpf_2eproto__INCLUDED
#define PROTOBUF_phxpf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_phxpf_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPhxIAmMasterImpl();
void InitDefaultsPhxIAmMaster();
void InitDefaultsPhxPFValueImpl();
void InitDefaultsPhxPFValue();
void InitDefaultsPhxPFOperatorArgsImpl();
void InitDefaultsPhxPFOperatorArgs();
void InitDefaultsPhxPFOperatorImpl();
void InitDefaultsPhxPFOperator();
void InitDefaultsPhxPFResponseImpl();
void InitDefaultsPhxPFResponse();
void InitDefaultsPhxPFSingleOperatorArgsImpl();
void InitDefaultsPhxPFSingleOperatorArgs();
void InitDefaultsPhxPFSingleOperatorImpl();
void InitDefaultsPhxPFSingleOperator();
void InitDefaultsPhxPFSingleResponseImpl();
void InitDefaultsPhxPFSingleResponse();
void InitDefaultsPhxPFMsgImpl();
void InitDefaultsPhxPFMsg();
inline void InitDefaults() {
  InitDefaultsPhxIAmMaster();
  InitDefaultsPhxPFValue();
  InitDefaultsPhxPFOperatorArgs();
  InitDefaultsPhxPFOperator();
  InitDefaultsPhxPFResponse();
  InitDefaultsPhxPFSingleOperatorArgs();
  InitDefaultsPhxPFSingleOperator();
  InitDefaultsPhxPFSingleResponse();
  InitDefaultsPhxPFMsg();
}
}  // namespace protobuf_phxpf_2eproto
namespace phxpf {
class PhxIAmMaster;
class PhxIAmMasterDefaultTypeInternal;
extern PhxIAmMasterDefaultTypeInternal _PhxIAmMaster_default_instance_;
class PhxPFMsg;
class PhxPFMsgDefaultTypeInternal;
extern PhxPFMsgDefaultTypeInternal _PhxPFMsg_default_instance_;
class PhxPFOperator;
class PhxPFOperatorDefaultTypeInternal;
extern PhxPFOperatorDefaultTypeInternal _PhxPFOperator_default_instance_;
class PhxPFOperatorArgs;
class PhxPFOperatorArgsDefaultTypeInternal;
extern PhxPFOperatorArgsDefaultTypeInternal _PhxPFOperatorArgs_default_instance_;
class PhxPFResponse;
class PhxPFResponseDefaultTypeInternal;
extern PhxPFResponseDefaultTypeInternal _PhxPFResponse_default_instance_;
class PhxPFSingleOperator;
class PhxPFSingleOperatorDefaultTypeInternal;
extern PhxPFSingleOperatorDefaultTypeInternal _PhxPFSingleOperator_default_instance_;
class PhxPFSingleOperatorArgs;
class PhxPFSingleOperatorArgsDefaultTypeInternal;
extern PhxPFSingleOperatorArgsDefaultTypeInternal _PhxPFSingleOperatorArgs_default_instance_;
class PhxPFSingleResponse;
class PhxPFSingleResponseDefaultTypeInternal;
extern PhxPFSingleResponseDefaultTypeInternal _PhxPFSingleResponse_default_instance_;
class PhxPFValue;
class PhxPFValueDefaultTypeInternal;
extern PhxPFValueDefaultTypeInternal _PhxPFValue_default_instance_;
}  // namespace phxpf
namespace phxpf {

enum PhxPFOperatorType {
  PHXPF_UNKNOWN = 0,
  PHXPF_FILTER = 1,
  PHXPF_UPDATE = 2,
  PHXPF_DELETE = 3,
  PHXPF_SINGLE_FILTER = 4,
  PHXPF_SINGLE_UPDATE = 5,
  PHXPF_SINGLE_DELETE = 6,
  PhxPFOperatorType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PhxPFOperatorType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PhxPFOperatorType_IsValid(int value);
const PhxPFOperatorType PhxPFOperatorType_MIN = PHXPF_UNKNOWN;
const PhxPFOperatorType PhxPFOperatorType_MAX = PHXPF_SINGLE_DELETE;
const int PhxPFOperatorType_ARRAYSIZE = PhxPFOperatorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PhxPFOperatorType_descriptor();
inline const ::std::string& PhxPFOperatorType_Name(PhxPFOperatorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PhxPFOperatorType_descriptor(), value);
}
inline bool PhxPFOperatorType_Parse(
    const ::std::string& name, PhxPFOperatorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PhxPFOperatorType>(
    PhxPFOperatorType_descriptor(), name, value);
}
enum PhxPFRetType {
  PHXPARTITIONFILTER_OK = 0,
  PHXPARTITIONFILTER_SYS_FAIL = -1,
  PHXPARTITIONFILTER_KEY_NOT_EXISTS = -2,
  PHXPARTITIONFILTER_CLIENT_RETRY = -3,
  PHXPARTITIONFILTER_REDIRECT = -4,
  PHXPARTITIONFILTER_NOTMASTER = -5,
  PhxPFRetType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PhxPFRetType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PhxPFRetType_IsValid(int value);
const PhxPFRetType PhxPFRetType_MIN = PHXPARTITIONFILTER_NOTMASTER;
const PhxPFRetType PhxPFRetType_MAX = PHXPARTITIONFILTER_OK;
const int PhxPFRetType_ARRAYSIZE = PhxPFRetType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PhxPFRetType_descriptor();
inline const ::std::string& PhxPFRetType_Name(PhxPFRetType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PhxPFRetType_descriptor(), value);
}
inline bool PhxPFRetType_Parse(
    const ::std::string& name, PhxPFRetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PhxPFRetType>(
    PhxPFRetType_descriptor(), name, value);
}
enum PhxMsgType {
  MULTI = 0,
  SINGLE = 1,
  READY = 2,
  PhxMsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PhxMsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PhxMsgType_IsValid(int value);
const PhxMsgType PhxMsgType_MIN = MULTI;
const PhxMsgType PhxMsgType_MAX = READY;
const int PhxMsgType_ARRAYSIZE = PhxMsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PhxMsgType_descriptor();
inline const ::std::string& PhxMsgType_Name(PhxMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PhxMsgType_descriptor(), value);
}
inline bool PhxMsgType_Parse(
    const ::std::string& name, PhxMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PhxMsgType>(
    PhxMsgType_descriptor(), name, value);
}
// ===================================================================

class PhxIAmMaster : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:phxpf.PhxIAmMaster) */ {
 public:
  PhxIAmMaster();
  virtual ~PhxIAmMaster();

  PhxIAmMaster(const PhxIAmMaster& from);

  inline PhxIAmMaster& operator=(const PhxIAmMaster& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PhxIAmMaster(PhxIAmMaster&& from) noexcept
    : PhxIAmMaster() {
    *this = ::std::move(from);
  }

  inline PhxIAmMaster& operator=(PhxIAmMaster&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PhxIAmMaster& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PhxIAmMaster* internal_default_instance() {
    return reinterpret_cast<const PhxIAmMaster*>(
               &_PhxIAmMaster_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PhxIAmMaster* other);
  friend void swap(PhxIAmMaster& a, PhxIAmMaster& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PhxIAmMaster* New() const PROTOBUF_FINAL { return New(NULL); }

  PhxIAmMaster* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PhxIAmMaster& from);
  void MergeFrom(const PhxIAmMaster& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PhxIAmMaster* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool master = 1;
  void clear_master();
  static const int kMasterFieldNumber = 1;
  bool master() const;
  void set_master(bool value);

  // @@protoc_insertion_point(class_scope:phxpf.PhxIAmMaster)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool master_;
  mutable int _cached_size_;
  friend struct ::protobuf_phxpf_2eproto::TableStruct;
  friend void ::protobuf_phxpf_2eproto::InitDefaultsPhxIAmMasterImpl();
};
// -------------------------------------------------------------------

class PhxPFValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:phxpf.PhxPFValue) */ {
 public:
  PhxPFValue();
  virtual ~PhxPFValue();

  PhxPFValue(const PhxPFValue& from);

  inline PhxPFValue& operator=(const PhxPFValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PhxPFValue(PhxPFValue&& from) noexcept
    : PhxPFValue() {
    *this = ::std::move(from);
  }

  inline PhxPFValue& operator=(PhxPFValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PhxPFValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PhxPFValue* internal_default_instance() {
    return reinterpret_cast<const PhxPFValue*>(
               &_PhxPFValue_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PhxPFValue* other);
  friend void swap(PhxPFValue& a, PhxPFValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PhxPFValue* New() const PROTOBUF_FINAL { return New(NULL); }

  PhxPFValue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PhxPFValue& from);
  void MergeFrom(const PhxPFValue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PhxPFValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::std::string& values(int index) const;
  ::std::string* mutable_values(int index);
  void set_values(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_values(int index, ::std::string&& value);
  #endif
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  ::std::string* add_values();
  void add_values(const ::std::string& value);
  #if LANG_CXX11
  void add_values(::std::string&& value);
  #endif
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& values() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_values();

  // @@protoc_insertion_point(class_scope:phxpf.PhxPFValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> values_;
  mutable int _cached_size_;
  friend struct ::protobuf_phxpf_2eproto::TableStruct;
  friend void ::protobuf_phxpf_2eproto::InitDefaultsPhxPFValueImpl();
};
// -------------------------------------------------------------------

class PhxPFOperatorArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:phxpf.PhxPFOperatorArgs) */ {
 public:
  PhxPFOperatorArgs();
  virtual ~PhxPFOperatorArgs();

  PhxPFOperatorArgs(const PhxPFOperatorArgs& from);

  inline PhxPFOperatorArgs& operator=(const PhxPFOperatorArgs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PhxPFOperatorArgs(PhxPFOperatorArgs&& from) noexcept
    : PhxPFOperatorArgs() {
    *this = ::std::move(from);
  }

  inline PhxPFOperatorArgs& operator=(PhxPFOperatorArgs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PhxPFOperatorArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PhxPFOperatorArgs* internal_default_instance() {
    return reinterpret_cast<const PhxPFOperatorArgs*>(
               &_PhxPFOperatorArgs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(PhxPFOperatorArgs* other);
  friend void swap(PhxPFOperatorArgs& a, PhxPFOperatorArgs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PhxPFOperatorArgs* New() const PROTOBUF_FINAL { return New(NULL); }

  PhxPFOperatorArgs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PhxPFOperatorArgs& from);
  void MergeFrom(const PhxPFOperatorArgs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PhxPFOperatorArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string partition = 1;
  void clear_partition();
  static const int kPartitionFieldNumber = 1;
  const ::std::string& partition() const;
  void set_partition(const ::std::string& value);
  #if LANG_CXX11
  void set_partition(::std::string&& value);
  #endif
  void set_partition(const char* value);
  void set_partition(const char* value, size_t size);
  ::std::string* mutable_partition();
  ::std::string* release_partition();
  void set_allocated_partition(::std::string* partition);

  // .phxpf.PhxPFValue value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::phxpf::PhxPFValue& value() const;
  ::phxpf::PhxPFValue* release_value();
  ::phxpf::PhxPFValue* mutable_value();
  void set_allocated_value(::phxpf::PhxPFValue* value);

  // @@protoc_insertion_point(class_scope:phxpf.PhxPFOperatorArgs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr partition_;
  ::phxpf::PhxPFValue* value_;
  mutable int _cached_size_;
  friend struct ::protobuf_phxpf_2eproto::TableStruct;
  friend void ::protobuf_phxpf_2eproto::InitDefaultsPhxPFOperatorArgsImpl();
};
// -------------------------------------------------------------------

class PhxPFOperator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:phxpf.PhxPFOperator) */ {
 public:
  PhxPFOperator();
  virtual ~PhxPFOperator();

  PhxPFOperator(const PhxPFOperator& from);

  inline PhxPFOperator& operator=(const PhxPFOperator& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PhxPFOperator(PhxPFOperator&& from) noexcept
    : PhxPFOperator() {
    *this = ::std::move(from);
  }

  inline PhxPFOperator& operator=(PhxPFOperator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PhxPFOperator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PhxPFOperator* internal_default_instance() {
    return reinterpret_cast<const PhxPFOperator*>(
               &_PhxPFOperator_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(PhxPFOperator* other);
  friend void swap(PhxPFOperator& a, PhxPFOperator& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PhxPFOperator* New() const PROTOBUF_FINAL { return New(NULL); }

  PhxPFOperator* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PhxPFOperator& from);
  void MergeFrom(const PhxPFOperator& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PhxPFOperator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .phxpf.PhxPFOperatorArgs args = 2;
  bool has_args() const;
  void clear_args();
  static const int kArgsFieldNumber = 2;
  const ::phxpf::PhxPFOperatorArgs& args() const;
  ::phxpf::PhxPFOperatorArgs* release_args();
  ::phxpf::PhxPFOperatorArgs* mutable_args();
  void set_allocated_args(::phxpf::PhxPFOperatorArgs* args);

  // .phxpf.PhxPFOperatorType operator = 1;
  void clear_operator_();
  static const int kOperatorFieldNumber = 1;
  ::phxpf::PhxPFOperatorType operator_() const;
  void set_operator_(::phxpf::PhxPFOperatorType value);

  // @@protoc_insertion_point(class_scope:phxpf.PhxPFOperator)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::phxpf::PhxPFOperatorArgs* args_;
  int operator__;
  mutable int _cached_size_;
  friend struct ::protobuf_phxpf_2eproto::TableStruct;
  friend void ::protobuf_phxpf_2eproto::InitDefaultsPhxPFOperatorImpl();
};
// -------------------------------------------------------------------

class PhxPFResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:phxpf.PhxPFResponse) */ {
 public:
  PhxPFResponse();
  virtual ~PhxPFResponse();

  PhxPFResponse(const PhxPFResponse& from);

  inline PhxPFResponse& operator=(const PhxPFResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PhxPFResponse(PhxPFResponse&& from) noexcept
    : PhxPFResponse() {
    *this = ::std::move(from);
  }

  inline PhxPFResponse& operator=(PhxPFResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PhxPFResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PhxPFResponse* internal_default_instance() {
    return reinterpret_cast<const PhxPFResponse*>(
               &_PhxPFResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(PhxPFResponse* other);
  friend void swap(PhxPFResponse& a, PhxPFResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PhxPFResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  PhxPFResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PhxPFResponse& from);
  void MergeFrom(const PhxPFResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PhxPFResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // .phxpf.PhxPFValue value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::phxpf::PhxPFValue& value() const;
  ::phxpf::PhxPFValue* release_value();
  ::phxpf::PhxPFValue* mutable_value();
  void set_allocated_value(::phxpf::PhxPFValue* value);

  // int32 ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::google::protobuf::int32 ret() const;
  void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:phxpf.PhxPFResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::phxpf::PhxPFValue* value_;
  ::google::protobuf::int32 ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_phxpf_2eproto::TableStruct;
  friend void ::protobuf_phxpf_2eproto::InitDefaultsPhxPFResponseImpl();
};
// -------------------------------------------------------------------

class PhxPFSingleOperatorArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:phxpf.PhxPFSingleOperatorArgs) */ {
 public:
  PhxPFSingleOperatorArgs();
  virtual ~PhxPFSingleOperatorArgs();

  PhxPFSingleOperatorArgs(const PhxPFSingleOperatorArgs& from);

  inline PhxPFSingleOperatorArgs& operator=(const PhxPFSingleOperatorArgs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PhxPFSingleOperatorArgs(PhxPFSingleOperatorArgs&& from) noexcept
    : PhxPFSingleOperatorArgs() {
    *this = ::std::move(from);
  }

  inline PhxPFSingleOperatorArgs& operator=(PhxPFSingleOperatorArgs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PhxPFSingleOperatorArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PhxPFSingleOperatorArgs* internal_default_instance() {
    return reinterpret_cast<const PhxPFSingleOperatorArgs*>(
               &_PhxPFSingleOperatorArgs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(PhxPFSingleOperatorArgs* other);
  friend void swap(PhxPFSingleOperatorArgs& a, PhxPFSingleOperatorArgs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PhxPFSingleOperatorArgs* New() const PROTOBUF_FINAL { return New(NULL); }

  PhxPFSingleOperatorArgs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PhxPFSingleOperatorArgs& from);
  void MergeFrom(const PhxPFSingleOperatorArgs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PhxPFSingleOperatorArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string partition = 1;
  void clear_partition();
  static const int kPartitionFieldNumber = 1;
  const ::std::string& partition() const;
  void set_partition(const ::std::string& value);
  #if LANG_CXX11
  void set_partition(::std::string&& value);
  #endif
  void set_partition(const char* value);
  void set_partition(const char* value, size_t size);
  ::std::string* mutable_partition();
  ::std::string* release_partition();
  void set_allocated_partition(::std::string* partition);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:phxpf.PhxPFSingleOperatorArgs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr partition_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend struct ::protobuf_phxpf_2eproto::TableStruct;
  friend void ::protobuf_phxpf_2eproto::InitDefaultsPhxPFSingleOperatorArgsImpl();
};
// -------------------------------------------------------------------

class PhxPFSingleOperator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:phxpf.PhxPFSingleOperator) */ {
 public:
  PhxPFSingleOperator();
  virtual ~PhxPFSingleOperator();

  PhxPFSingleOperator(const PhxPFSingleOperator& from);

  inline PhxPFSingleOperator& operator=(const PhxPFSingleOperator& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PhxPFSingleOperator(PhxPFSingleOperator&& from) noexcept
    : PhxPFSingleOperator() {
    *this = ::std::move(from);
  }

  inline PhxPFSingleOperator& operator=(PhxPFSingleOperator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PhxPFSingleOperator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PhxPFSingleOperator* internal_default_instance() {
    return reinterpret_cast<const PhxPFSingleOperator*>(
               &_PhxPFSingleOperator_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(PhxPFSingleOperator* other);
  friend void swap(PhxPFSingleOperator& a, PhxPFSingleOperator& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PhxPFSingleOperator* New() const PROTOBUF_FINAL { return New(NULL); }

  PhxPFSingleOperator* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PhxPFSingleOperator& from);
  void MergeFrom(const PhxPFSingleOperator& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PhxPFSingleOperator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .phxpf.PhxPFSingleOperatorArgs args = 2;
  bool has_args() const;
  void clear_args();
  static const int kArgsFieldNumber = 2;
  const ::phxpf::PhxPFSingleOperatorArgs& args() const;
  ::phxpf::PhxPFSingleOperatorArgs* release_args();
  ::phxpf::PhxPFSingleOperatorArgs* mutable_args();
  void set_allocated_args(::phxpf::PhxPFSingleOperatorArgs* args);

  // .phxpf.PhxPFOperatorType operator = 1;
  void clear_operator_();
  static const int kOperatorFieldNumber = 1;
  ::phxpf::PhxPFOperatorType operator_() const;
  void set_operator_(::phxpf::PhxPFOperatorType value);

  // @@protoc_insertion_point(class_scope:phxpf.PhxPFSingleOperator)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::phxpf::PhxPFSingleOperatorArgs* args_;
  int operator__;
  mutable int _cached_size_;
  friend struct ::protobuf_phxpf_2eproto::TableStruct;
  friend void ::protobuf_phxpf_2eproto::InitDefaultsPhxPFSingleOperatorImpl();
};
// -------------------------------------------------------------------

class PhxPFSingleResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:phxpf.PhxPFSingleResponse) */ {
 public:
  PhxPFSingleResponse();
  virtual ~PhxPFSingleResponse();

  PhxPFSingleResponse(const PhxPFSingleResponse& from);

  inline PhxPFSingleResponse& operator=(const PhxPFSingleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PhxPFSingleResponse(PhxPFSingleResponse&& from) noexcept
    : PhxPFSingleResponse() {
    *this = ::std::move(from);
  }

  inline PhxPFSingleResponse& operator=(PhxPFSingleResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PhxPFSingleResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PhxPFSingleResponse* internal_default_instance() {
    return reinterpret_cast<const PhxPFSingleResponse*>(
               &_PhxPFSingleResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(PhxPFSingleResponse* other);
  friend void swap(PhxPFSingleResponse& a, PhxPFSingleResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PhxPFSingleResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  PhxPFSingleResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PhxPFSingleResponse& from);
  void MergeFrom(const PhxPFSingleResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PhxPFSingleResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // int32 ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::google::protobuf::int32 ret() const;
  void set_ret(::google::protobuf::int32 value);

  // bool value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  bool value() const;
  void set_value(bool value);

  // @@protoc_insertion_point(class_scope:phxpf.PhxPFSingleResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 ret_;
  bool value_;
  mutable int _cached_size_;
  friend struct ::protobuf_phxpf_2eproto::TableStruct;
  friend void ::protobuf_phxpf_2eproto::InitDefaultsPhxPFSingleResponseImpl();
};
// -------------------------------------------------------------------

class PhxPFMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:phxpf.PhxPFMsg) */ {
 public:
  PhxPFMsg();
  virtual ~PhxPFMsg();

  PhxPFMsg(const PhxPFMsg& from);

  inline PhxPFMsg& operator=(const PhxPFMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PhxPFMsg(PhxPFMsg&& from) noexcept
    : PhxPFMsg() {
    *this = ::std::move(from);
  }

  inline PhxPFMsg& operator=(PhxPFMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PhxPFMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PhxPFMsg* internal_default_instance() {
    return reinterpret_cast<const PhxPFMsg*>(
               &_PhxPFMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(PhxPFMsg* other);
  friend void swap(PhxPFMsg& a, PhxPFMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PhxPFMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  PhxPFMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PhxPFMsg& from);
  void MergeFrom(const PhxPFMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PhxPFMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .phxpf.PhxMsgType vtype = 1;
  void clear_vtype();
  static const int kVtypeFieldNumber = 1;
  ::phxpf::PhxMsgType vtype() const;
  void set_vtype(::phxpf::PhxMsgType value);

  // @@protoc_insertion_point(class_scope:phxpf.PhxPFMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  int vtype_;
  mutable int _cached_size_;
  friend struct ::protobuf_phxpf_2eproto::TableStruct;
  friend void ::protobuf_phxpf_2eproto::InitDefaultsPhxPFMsgImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PhxIAmMaster

// bool master = 1;
inline void PhxIAmMaster::clear_master() {
  master_ = false;
}
inline bool PhxIAmMaster::master() const {
  // @@protoc_insertion_point(field_get:phxpf.PhxIAmMaster.master)
  return master_;
}
inline void PhxIAmMaster::set_master(bool value) {
  
  master_ = value;
  // @@protoc_insertion_point(field_set:phxpf.PhxIAmMaster.master)
}

// -------------------------------------------------------------------

// PhxPFValue

// repeated string values = 1;
inline int PhxPFValue::values_size() const {
  return values_.size();
}
inline void PhxPFValue::clear_values() {
  values_.Clear();
}
inline const ::std::string& PhxPFValue::values(int index) const {
  // @@protoc_insertion_point(field_get:phxpf.PhxPFValue.values)
  return values_.Get(index);
}
inline ::std::string* PhxPFValue::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:phxpf.PhxPFValue.values)
  return values_.Mutable(index);
}
inline void PhxPFValue::set_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:phxpf.PhxPFValue.values)
  values_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PhxPFValue::set_values(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:phxpf.PhxPFValue.values)
  values_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PhxPFValue::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:phxpf.PhxPFValue.values)
}
inline void PhxPFValue::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:phxpf.PhxPFValue.values)
}
inline ::std::string* PhxPFValue::add_values() {
  // @@protoc_insertion_point(field_add_mutable:phxpf.PhxPFValue.values)
  return values_.Add();
}
inline void PhxPFValue::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:phxpf.PhxPFValue.values)
}
#if LANG_CXX11
inline void PhxPFValue::add_values(::std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:phxpf.PhxPFValue.values)
}
#endif
inline void PhxPFValue::add_values(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:phxpf.PhxPFValue.values)
}
inline void PhxPFValue::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:phxpf.PhxPFValue.values)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PhxPFValue::values() const {
  // @@protoc_insertion_point(field_list:phxpf.PhxPFValue.values)
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PhxPFValue::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:phxpf.PhxPFValue.values)
  return &values_;
}

// -------------------------------------------------------------------

// PhxPFOperatorArgs

// string partition = 1;
inline void PhxPFOperatorArgs::clear_partition() {
  partition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PhxPFOperatorArgs::partition() const {
  // @@protoc_insertion_point(field_get:phxpf.PhxPFOperatorArgs.partition)
  return partition_.GetNoArena();
}
inline void PhxPFOperatorArgs::set_partition(const ::std::string& value) {
  
  partition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phxpf.PhxPFOperatorArgs.partition)
}
#if LANG_CXX11
inline void PhxPFOperatorArgs::set_partition(::std::string&& value) {
  
  partition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:phxpf.PhxPFOperatorArgs.partition)
}
#endif
inline void PhxPFOperatorArgs::set_partition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  partition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phxpf.PhxPFOperatorArgs.partition)
}
inline void PhxPFOperatorArgs::set_partition(const char* value, size_t size) {
  
  partition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phxpf.PhxPFOperatorArgs.partition)
}
inline ::std::string* PhxPFOperatorArgs::mutable_partition() {
  
  // @@protoc_insertion_point(field_mutable:phxpf.PhxPFOperatorArgs.partition)
  return partition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhxPFOperatorArgs::release_partition() {
  // @@protoc_insertion_point(field_release:phxpf.PhxPFOperatorArgs.partition)
  
  return partition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhxPFOperatorArgs::set_allocated_partition(::std::string* partition) {
  if (partition != NULL) {
    
  } else {
    
  }
  partition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partition);
  // @@protoc_insertion_point(field_set_allocated:phxpf.PhxPFOperatorArgs.partition)
}

// .phxpf.PhxPFValue value = 2;
inline bool PhxPFOperatorArgs::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void PhxPFOperatorArgs::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::phxpf::PhxPFValue& PhxPFOperatorArgs::value() const {
  const ::phxpf::PhxPFValue* p = value_;
  // @@protoc_insertion_point(field_get:phxpf.PhxPFOperatorArgs.value)
  return p != NULL ? *p : *reinterpret_cast<const ::phxpf::PhxPFValue*>(
      &::phxpf::_PhxPFValue_default_instance_);
}
inline ::phxpf::PhxPFValue* PhxPFOperatorArgs::release_value() {
  // @@protoc_insertion_point(field_release:phxpf.PhxPFOperatorArgs.value)
  
  ::phxpf::PhxPFValue* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::phxpf::PhxPFValue* PhxPFOperatorArgs::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::phxpf::PhxPFValue;
  }
  // @@protoc_insertion_point(field_mutable:phxpf.PhxPFOperatorArgs.value)
  return value_;
}
inline void PhxPFOperatorArgs::set_allocated_value(::phxpf::PhxPFValue* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:phxpf.PhxPFOperatorArgs.value)
}

// -------------------------------------------------------------------

// PhxPFOperator

// .phxpf.PhxPFOperatorType operator = 1;
inline void PhxPFOperator::clear_operator_() {
  operator__ = 0;
}
inline ::phxpf::PhxPFOperatorType PhxPFOperator::operator_() const {
  // @@protoc_insertion_point(field_get:phxpf.PhxPFOperator.operator)
  return static_cast< ::phxpf::PhxPFOperatorType >(operator__);
}
inline void PhxPFOperator::set_operator_(::phxpf::PhxPFOperatorType value) {
  
  operator__ = value;
  // @@protoc_insertion_point(field_set:phxpf.PhxPFOperator.operator)
}

// .phxpf.PhxPFOperatorArgs args = 2;
inline bool PhxPFOperator::has_args() const {
  return this != internal_default_instance() && args_ != NULL;
}
inline void PhxPFOperator::clear_args() {
  if (GetArenaNoVirtual() == NULL && args_ != NULL) {
    delete args_;
  }
  args_ = NULL;
}
inline const ::phxpf::PhxPFOperatorArgs& PhxPFOperator::args() const {
  const ::phxpf::PhxPFOperatorArgs* p = args_;
  // @@protoc_insertion_point(field_get:phxpf.PhxPFOperator.args)
  return p != NULL ? *p : *reinterpret_cast<const ::phxpf::PhxPFOperatorArgs*>(
      &::phxpf::_PhxPFOperatorArgs_default_instance_);
}
inline ::phxpf::PhxPFOperatorArgs* PhxPFOperator::release_args() {
  // @@protoc_insertion_point(field_release:phxpf.PhxPFOperator.args)
  
  ::phxpf::PhxPFOperatorArgs* temp = args_;
  args_ = NULL;
  return temp;
}
inline ::phxpf::PhxPFOperatorArgs* PhxPFOperator::mutable_args() {
  
  if (args_ == NULL) {
    args_ = new ::phxpf::PhxPFOperatorArgs;
  }
  // @@protoc_insertion_point(field_mutable:phxpf.PhxPFOperator.args)
  return args_;
}
inline void PhxPFOperator::set_allocated_args(::phxpf::PhxPFOperatorArgs* args) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete args_;
  }
  if (args) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      args = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, args, submessage_arena);
    }
    
  } else {
    
  }
  args_ = args;
  // @@protoc_insertion_point(field_set_allocated:phxpf.PhxPFOperator.args)
}

// -------------------------------------------------------------------

// PhxPFResponse

// int32 ret = 1;
inline void PhxPFResponse::clear_ret() {
  ret_ = 0;
}
inline ::google::protobuf::int32 PhxPFResponse::ret() const {
  // @@protoc_insertion_point(field_get:phxpf.PhxPFResponse.ret)
  return ret_;
}
inline void PhxPFResponse::set_ret(::google::protobuf::int32 value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:phxpf.PhxPFResponse.ret)
}

// string msg = 2;
inline void PhxPFResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PhxPFResponse::msg() const {
  // @@protoc_insertion_point(field_get:phxpf.PhxPFResponse.msg)
  return msg_.GetNoArena();
}
inline void PhxPFResponse::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phxpf.PhxPFResponse.msg)
}
#if LANG_CXX11
inline void PhxPFResponse::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:phxpf.PhxPFResponse.msg)
}
#endif
inline void PhxPFResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phxpf.PhxPFResponse.msg)
}
inline void PhxPFResponse::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phxpf.PhxPFResponse.msg)
}
inline ::std::string* PhxPFResponse::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:phxpf.PhxPFResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhxPFResponse::release_msg() {
  // @@protoc_insertion_point(field_release:phxpf.PhxPFResponse.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhxPFResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:phxpf.PhxPFResponse.msg)
}

// .phxpf.PhxPFValue value = 3;
inline bool PhxPFResponse::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void PhxPFResponse::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::phxpf::PhxPFValue& PhxPFResponse::value() const {
  const ::phxpf::PhxPFValue* p = value_;
  // @@protoc_insertion_point(field_get:phxpf.PhxPFResponse.value)
  return p != NULL ? *p : *reinterpret_cast<const ::phxpf::PhxPFValue*>(
      &::phxpf::_PhxPFValue_default_instance_);
}
inline ::phxpf::PhxPFValue* PhxPFResponse::release_value() {
  // @@protoc_insertion_point(field_release:phxpf.PhxPFResponse.value)
  
  ::phxpf::PhxPFValue* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::phxpf::PhxPFValue* PhxPFResponse::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::phxpf::PhxPFValue;
  }
  // @@protoc_insertion_point(field_mutable:phxpf.PhxPFResponse.value)
  return value_;
}
inline void PhxPFResponse::set_allocated_value(::phxpf::PhxPFValue* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:phxpf.PhxPFResponse.value)
}

// -------------------------------------------------------------------

// PhxPFSingleOperatorArgs

// string partition = 1;
inline void PhxPFSingleOperatorArgs::clear_partition() {
  partition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PhxPFSingleOperatorArgs::partition() const {
  // @@protoc_insertion_point(field_get:phxpf.PhxPFSingleOperatorArgs.partition)
  return partition_.GetNoArena();
}
inline void PhxPFSingleOperatorArgs::set_partition(const ::std::string& value) {
  
  partition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phxpf.PhxPFSingleOperatorArgs.partition)
}
#if LANG_CXX11
inline void PhxPFSingleOperatorArgs::set_partition(::std::string&& value) {
  
  partition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:phxpf.PhxPFSingleOperatorArgs.partition)
}
#endif
inline void PhxPFSingleOperatorArgs::set_partition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  partition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phxpf.PhxPFSingleOperatorArgs.partition)
}
inline void PhxPFSingleOperatorArgs::set_partition(const char* value, size_t size) {
  
  partition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phxpf.PhxPFSingleOperatorArgs.partition)
}
inline ::std::string* PhxPFSingleOperatorArgs::mutable_partition() {
  
  // @@protoc_insertion_point(field_mutable:phxpf.PhxPFSingleOperatorArgs.partition)
  return partition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhxPFSingleOperatorArgs::release_partition() {
  // @@protoc_insertion_point(field_release:phxpf.PhxPFSingleOperatorArgs.partition)
  
  return partition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhxPFSingleOperatorArgs::set_allocated_partition(::std::string* partition) {
  if (partition != NULL) {
    
  } else {
    
  }
  partition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partition);
  // @@protoc_insertion_point(field_set_allocated:phxpf.PhxPFSingleOperatorArgs.partition)
}

// string value = 2;
inline void PhxPFSingleOperatorArgs::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PhxPFSingleOperatorArgs::value() const {
  // @@protoc_insertion_point(field_get:phxpf.PhxPFSingleOperatorArgs.value)
  return value_.GetNoArena();
}
inline void PhxPFSingleOperatorArgs::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phxpf.PhxPFSingleOperatorArgs.value)
}
#if LANG_CXX11
inline void PhxPFSingleOperatorArgs::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:phxpf.PhxPFSingleOperatorArgs.value)
}
#endif
inline void PhxPFSingleOperatorArgs::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phxpf.PhxPFSingleOperatorArgs.value)
}
inline void PhxPFSingleOperatorArgs::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phxpf.PhxPFSingleOperatorArgs.value)
}
inline ::std::string* PhxPFSingleOperatorArgs::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:phxpf.PhxPFSingleOperatorArgs.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhxPFSingleOperatorArgs::release_value() {
  // @@protoc_insertion_point(field_release:phxpf.PhxPFSingleOperatorArgs.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhxPFSingleOperatorArgs::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:phxpf.PhxPFSingleOperatorArgs.value)
}

// -------------------------------------------------------------------

// PhxPFSingleOperator

// .phxpf.PhxPFOperatorType operator = 1;
inline void PhxPFSingleOperator::clear_operator_() {
  operator__ = 0;
}
inline ::phxpf::PhxPFOperatorType PhxPFSingleOperator::operator_() const {
  // @@protoc_insertion_point(field_get:phxpf.PhxPFSingleOperator.operator)
  return static_cast< ::phxpf::PhxPFOperatorType >(operator__);
}
inline void PhxPFSingleOperator::set_operator_(::phxpf::PhxPFOperatorType value) {
  
  operator__ = value;
  // @@protoc_insertion_point(field_set:phxpf.PhxPFSingleOperator.operator)
}

// .phxpf.PhxPFSingleOperatorArgs args = 2;
inline bool PhxPFSingleOperator::has_args() const {
  return this != internal_default_instance() && args_ != NULL;
}
inline void PhxPFSingleOperator::clear_args() {
  if (GetArenaNoVirtual() == NULL && args_ != NULL) {
    delete args_;
  }
  args_ = NULL;
}
inline const ::phxpf::PhxPFSingleOperatorArgs& PhxPFSingleOperator::args() const {
  const ::phxpf::PhxPFSingleOperatorArgs* p = args_;
  // @@protoc_insertion_point(field_get:phxpf.PhxPFSingleOperator.args)
  return p != NULL ? *p : *reinterpret_cast<const ::phxpf::PhxPFSingleOperatorArgs*>(
      &::phxpf::_PhxPFSingleOperatorArgs_default_instance_);
}
inline ::phxpf::PhxPFSingleOperatorArgs* PhxPFSingleOperator::release_args() {
  // @@protoc_insertion_point(field_release:phxpf.PhxPFSingleOperator.args)
  
  ::phxpf::PhxPFSingleOperatorArgs* temp = args_;
  args_ = NULL;
  return temp;
}
inline ::phxpf::PhxPFSingleOperatorArgs* PhxPFSingleOperator::mutable_args() {
  
  if (args_ == NULL) {
    args_ = new ::phxpf::PhxPFSingleOperatorArgs;
  }
  // @@protoc_insertion_point(field_mutable:phxpf.PhxPFSingleOperator.args)
  return args_;
}
inline void PhxPFSingleOperator::set_allocated_args(::phxpf::PhxPFSingleOperatorArgs* args) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete args_;
  }
  if (args) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      args = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, args, submessage_arena);
    }
    
  } else {
    
  }
  args_ = args;
  // @@protoc_insertion_point(field_set_allocated:phxpf.PhxPFSingleOperator.args)
}

// -------------------------------------------------------------------

// PhxPFSingleResponse

// int32 ret = 1;
inline void PhxPFSingleResponse::clear_ret() {
  ret_ = 0;
}
inline ::google::protobuf::int32 PhxPFSingleResponse::ret() const {
  // @@protoc_insertion_point(field_get:phxpf.PhxPFSingleResponse.ret)
  return ret_;
}
inline void PhxPFSingleResponse::set_ret(::google::protobuf::int32 value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:phxpf.PhxPFSingleResponse.ret)
}

// string msg = 2;
inline void PhxPFSingleResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PhxPFSingleResponse::msg() const {
  // @@protoc_insertion_point(field_get:phxpf.PhxPFSingleResponse.msg)
  return msg_.GetNoArena();
}
inline void PhxPFSingleResponse::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phxpf.PhxPFSingleResponse.msg)
}
#if LANG_CXX11
inline void PhxPFSingleResponse::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:phxpf.PhxPFSingleResponse.msg)
}
#endif
inline void PhxPFSingleResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phxpf.PhxPFSingleResponse.msg)
}
inline void PhxPFSingleResponse::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phxpf.PhxPFSingleResponse.msg)
}
inline ::std::string* PhxPFSingleResponse::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:phxpf.PhxPFSingleResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhxPFSingleResponse::release_msg() {
  // @@protoc_insertion_point(field_release:phxpf.PhxPFSingleResponse.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhxPFSingleResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:phxpf.PhxPFSingleResponse.msg)
}

// bool value = 3;
inline void PhxPFSingleResponse::clear_value() {
  value_ = false;
}
inline bool PhxPFSingleResponse::value() const {
  // @@protoc_insertion_point(field_get:phxpf.PhxPFSingleResponse.value)
  return value_;
}
inline void PhxPFSingleResponse::set_value(bool value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:phxpf.PhxPFSingleResponse.value)
}

// -------------------------------------------------------------------

// PhxPFMsg

// .phxpf.PhxMsgType vtype = 1;
inline void PhxPFMsg::clear_vtype() {
  vtype_ = 0;
}
inline ::phxpf::PhxMsgType PhxPFMsg::vtype() const {
  // @@protoc_insertion_point(field_get:phxpf.PhxPFMsg.vtype)
  return static_cast< ::phxpf::PhxMsgType >(vtype_);
}
inline void PhxPFMsg::set_vtype(::phxpf::PhxMsgType value) {
  
  vtype_ = value;
  // @@protoc_insertion_point(field_set:phxpf.PhxPFMsg.vtype)
}

// bytes value = 2;
inline void PhxPFMsg::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PhxPFMsg::value() const {
  // @@protoc_insertion_point(field_get:phxpf.PhxPFMsg.value)
  return value_.GetNoArena();
}
inline void PhxPFMsg::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phxpf.PhxPFMsg.value)
}
#if LANG_CXX11
inline void PhxPFMsg::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:phxpf.PhxPFMsg.value)
}
#endif
inline void PhxPFMsg::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phxpf.PhxPFMsg.value)
}
inline void PhxPFMsg::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phxpf.PhxPFMsg.value)
}
inline ::std::string* PhxPFMsg::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:phxpf.PhxPFMsg.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhxPFMsg::release_value() {
  // @@protoc_insertion_point(field_release:phxpf.PhxPFMsg.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhxPFMsg::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:phxpf.PhxPFMsg.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace phxpf

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::phxpf::PhxPFOperatorType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phxpf::PhxPFOperatorType>() {
  return ::phxpf::PhxPFOperatorType_descriptor();
}
template <> struct is_proto_enum< ::phxpf::PhxPFRetType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phxpf::PhxPFRetType>() {
  return ::phxpf::PhxPFRetType_descriptor();
}
template <> struct is_proto_enum< ::phxpf::PhxMsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phxpf::PhxMsgType>() {
  return ::phxpf::PhxMsgType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_phxpf_2eproto__INCLUDED

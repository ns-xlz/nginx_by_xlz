// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: phxpf.proto

#include "phxpf.pb.h"
#include "phxpf.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace phxpf {

static const char* PhxPFServer_method_names[] = {
  "/phxpf.PhxPFServer/Filter",
  "/phxpf.PhxPFServer/Update",
  "/phxpf.PhxPFServer/Delete",
  "/phxpf.PhxPFServer/FilterOne",
  "/phxpf.PhxPFServer/UpdateOne",
  "/phxpf.PhxPFServer/DeleteOne",
  "/phxpf.PhxPFServer/IsMaster",
};

std::unique_ptr< PhxPFServer::Stub> PhxPFServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PhxPFServer::Stub> stub(new PhxPFServer::Stub(channel));
  return stub;
}

PhxPFServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Filter_(PhxPFServer_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_(PhxPFServer_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(PhxPFServer_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FilterOne_(PhxPFServer_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateOne_(PhxPFServer_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteOne_(PhxPFServer_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsMaster_(PhxPFServer_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PhxPFServer::Stub::Filter(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::phxpf::PhxPFResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Filter_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFResponse>* PhxPFServer::Stub::AsyncFilterRaw(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::phxpf::PhxPFResponse>::Create(channel_.get(), cq, rpcmethod_Filter_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFResponse>* PhxPFServer::Stub::PrepareAsyncFilterRaw(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::phxpf::PhxPFResponse>::Create(channel_.get(), cq, rpcmethod_Filter_, context, request, false);
}

::grpc::Status PhxPFServer::Stub::Update(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::phxpf::PhxPFResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Update_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFResponse>* PhxPFServer::Stub::AsyncUpdateRaw(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::phxpf::PhxPFResponse>::Create(channel_.get(), cq, rpcmethod_Update_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFResponse>* PhxPFServer::Stub::PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::phxpf::PhxPFResponse>::Create(channel_.get(), cq, rpcmethod_Update_, context, request, false);
}

::grpc::Status PhxPFServer::Stub::Delete(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::phxpf::PhxPFResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Delete_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFResponse>* PhxPFServer::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::phxpf::PhxPFResponse>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFResponse>* PhxPFServer::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::phxpf::PhxPFResponse>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, false);
}

::grpc::Status PhxPFServer::Stub::FilterOne(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::phxpf::PhxPFSingleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_FilterOne_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFSingleResponse>* PhxPFServer::Stub::AsyncFilterOneRaw(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::phxpf::PhxPFSingleResponse>::Create(channel_.get(), cq, rpcmethod_FilterOne_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFSingleResponse>* PhxPFServer::Stub::PrepareAsyncFilterOneRaw(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::phxpf::PhxPFSingleResponse>::Create(channel_.get(), cq, rpcmethod_FilterOne_, context, request, false);
}

::grpc::Status PhxPFServer::Stub::UpdateOne(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::phxpf::PhxPFSingleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateOne_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFSingleResponse>* PhxPFServer::Stub::AsyncUpdateOneRaw(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::phxpf::PhxPFSingleResponse>::Create(channel_.get(), cq, rpcmethod_UpdateOne_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFSingleResponse>* PhxPFServer::Stub::PrepareAsyncUpdateOneRaw(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::phxpf::PhxPFSingleResponse>::Create(channel_.get(), cq, rpcmethod_UpdateOne_, context, request, false);
}

::grpc::Status PhxPFServer::Stub::DeleteOne(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::phxpf::PhxPFSingleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteOne_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFSingleResponse>* PhxPFServer::Stub::AsyncDeleteOneRaw(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::phxpf::PhxPFSingleResponse>::Create(channel_.get(), cq, rpcmethod_DeleteOne_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFSingleResponse>* PhxPFServer::Stub::PrepareAsyncDeleteOneRaw(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::phxpf::PhxPFSingleResponse>::Create(channel_.get(), cq, rpcmethod_DeleteOne_, context, request, false);
}

::grpc::Status PhxPFServer::Stub::IsMaster(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::phxpf::PhxIAmMaster* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_IsMaster_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::phxpf::PhxIAmMaster>* PhxPFServer::Stub::AsyncIsMasterRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::phxpf::PhxIAmMaster>::Create(channel_.get(), cq, rpcmethod_IsMaster_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::phxpf::PhxIAmMaster>* PhxPFServer::Stub::PrepareAsyncIsMasterRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::phxpf::PhxIAmMaster>::Create(channel_.get(), cq, rpcmethod_IsMaster_, context, request, false);
}

PhxPFServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PhxPFServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PhxPFServer::Service, ::phxpf::PhxPFOperator, ::phxpf::PhxPFResponse>(
          std::mem_fn(&PhxPFServer::Service::Filter), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PhxPFServer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PhxPFServer::Service, ::phxpf::PhxPFOperator, ::phxpf::PhxPFResponse>(
          std::mem_fn(&PhxPFServer::Service::Update), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PhxPFServer_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PhxPFServer::Service, ::phxpf::PhxPFOperator, ::phxpf::PhxPFResponse>(
          std::mem_fn(&PhxPFServer::Service::Delete), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PhxPFServer_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PhxPFServer::Service, ::phxpf::PhxPFSingleOperator, ::phxpf::PhxPFSingleResponse>(
          std::mem_fn(&PhxPFServer::Service::FilterOne), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PhxPFServer_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PhxPFServer::Service, ::phxpf::PhxPFSingleOperator, ::phxpf::PhxPFSingleResponse>(
          std::mem_fn(&PhxPFServer::Service::UpdateOne), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PhxPFServer_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PhxPFServer::Service, ::phxpf::PhxPFSingleOperator, ::phxpf::PhxPFSingleResponse>(
          std::mem_fn(&PhxPFServer::Service::DeleteOne), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PhxPFServer_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PhxPFServer::Service, ::google::protobuf::Empty, ::phxpf::PhxIAmMaster>(
          std::mem_fn(&PhxPFServer::Service::IsMaster), this)));
}

PhxPFServer::Service::~Service() {
}

::grpc::Status PhxPFServer::Service::Filter(::grpc::ServerContext* context, const ::phxpf::PhxPFOperator* request, ::phxpf::PhxPFResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PhxPFServer::Service::Update(::grpc::ServerContext* context, const ::phxpf::PhxPFOperator* request, ::phxpf::PhxPFResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PhxPFServer::Service::Delete(::grpc::ServerContext* context, const ::phxpf::PhxPFOperator* request, ::phxpf::PhxPFResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PhxPFServer::Service::FilterOne(::grpc::ServerContext* context, const ::phxpf::PhxPFSingleOperator* request, ::phxpf::PhxPFSingleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PhxPFServer::Service::UpdateOne(::grpc::ServerContext* context, const ::phxpf::PhxPFSingleOperator* request, ::phxpf::PhxPFSingleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PhxPFServer::Service::DeleteOne(::grpc::ServerContext* context, const ::phxpf::PhxPFSingleOperator* request, ::phxpf::PhxPFSingleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PhxPFServer::Service::IsMaster(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::phxpf::PhxIAmMaster* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace phxpf


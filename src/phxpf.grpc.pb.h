// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: phxpf.proto
#ifndef GRPC_phxpf_2eproto__INCLUDED
#define GRPC_phxpf_2eproto__INCLUDED

#include "phxpf.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace phxpf {

class PhxPFServer final {
 public:
  static constexpr char const* service_full_name() {
    return "phxpf.PhxPFServer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Filter(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::phxpf::PhxPFResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxPFResponse>> AsyncFilter(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxPFResponse>>(AsyncFilterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxPFResponse>> PrepareAsyncFilter(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxPFResponse>>(PrepareAsyncFilterRaw(context, request, cq));
    }
    virtual ::grpc::Status Update(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::phxpf::PhxPFResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxPFResponse>> AsyncUpdate(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxPFResponse>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxPFResponse>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxPFResponse>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    virtual ::grpc::Status Delete(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::phxpf::PhxPFResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxPFResponse>> AsyncDelete(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxPFResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxPFResponse>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxPFResponse>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    virtual ::grpc::Status FilterOne(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::phxpf::PhxPFSingleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxPFSingleResponse>> AsyncFilterOne(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxPFSingleResponse>>(AsyncFilterOneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxPFSingleResponse>> PrepareAsyncFilterOne(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxPFSingleResponse>>(PrepareAsyncFilterOneRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateOne(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::phxpf::PhxPFSingleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxPFSingleResponse>> AsyncUpdateOne(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxPFSingleResponse>>(AsyncUpdateOneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxPFSingleResponse>> PrepareAsyncUpdateOne(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxPFSingleResponse>>(PrepareAsyncUpdateOneRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteOne(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::phxpf::PhxPFSingleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxPFSingleResponse>> AsyncDeleteOne(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxPFSingleResponse>>(AsyncDeleteOneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxPFSingleResponse>> PrepareAsyncDeleteOne(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxPFSingleResponse>>(PrepareAsyncDeleteOneRaw(context, request, cq));
    }
    virtual ::grpc::Status IsMaster(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::phxpf::PhxIAmMaster* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxIAmMaster>> AsyncIsMaster(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxIAmMaster>>(AsyncIsMasterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxIAmMaster>> PrepareAsyncIsMaster(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxIAmMaster>>(PrepareAsyncIsMasterRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxPFResponse>* AsyncFilterRaw(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxPFResponse>* PrepareAsyncFilterRaw(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxPFResponse>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxPFResponse>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxPFResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxPFResponse>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxPFSingleResponse>* AsyncFilterOneRaw(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxPFSingleResponse>* PrepareAsyncFilterOneRaw(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxPFSingleResponse>* AsyncUpdateOneRaw(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxPFSingleResponse>* PrepareAsyncUpdateOneRaw(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxPFSingleResponse>* AsyncDeleteOneRaw(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxPFSingleResponse>* PrepareAsyncDeleteOneRaw(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxIAmMaster>* AsyncIsMasterRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::phxpf::PhxIAmMaster>* PrepareAsyncIsMasterRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Filter(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::phxpf::PhxPFResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFResponse>> AsyncFilter(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFResponse>>(AsyncFilterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFResponse>> PrepareAsyncFilter(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFResponse>>(PrepareAsyncFilterRaw(context, request, cq));
    }
    ::grpc::Status Update(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::phxpf::PhxPFResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFResponse>> AsyncUpdate(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFResponse>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFResponse>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFResponse>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    ::grpc::Status Delete(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::phxpf::PhxPFResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFResponse>> AsyncDelete(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFResponse>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFResponse>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    ::grpc::Status FilterOne(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::phxpf::PhxPFSingleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFSingleResponse>> AsyncFilterOne(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFSingleResponse>>(AsyncFilterOneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFSingleResponse>> PrepareAsyncFilterOne(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFSingleResponse>>(PrepareAsyncFilterOneRaw(context, request, cq));
    }
    ::grpc::Status UpdateOne(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::phxpf::PhxPFSingleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFSingleResponse>> AsyncUpdateOne(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFSingleResponse>>(AsyncUpdateOneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFSingleResponse>> PrepareAsyncUpdateOne(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFSingleResponse>>(PrepareAsyncUpdateOneRaw(context, request, cq));
    }
    ::grpc::Status DeleteOne(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::phxpf::PhxPFSingleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFSingleResponse>> AsyncDeleteOne(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFSingleResponse>>(AsyncDeleteOneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFSingleResponse>> PrepareAsyncDeleteOne(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFSingleResponse>>(PrepareAsyncDeleteOneRaw(context, request, cq));
    }
    ::grpc::Status IsMaster(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::phxpf::PhxIAmMaster* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxpf::PhxIAmMaster>> AsyncIsMaster(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxpf::PhxIAmMaster>>(AsyncIsMasterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxpf::PhxIAmMaster>> PrepareAsyncIsMaster(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::phxpf::PhxIAmMaster>>(PrepareAsyncIsMasterRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFResponse>* AsyncFilterRaw(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFResponse>* PrepareAsyncFilterRaw(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFResponse>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFResponse>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFResponse>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::phxpf::PhxPFOperator& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFSingleResponse>* AsyncFilterOneRaw(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFSingleResponse>* PrepareAsyncFilterOneRaw(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFSingleResponse>* AsyncUpdateOneRaw(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFSingleResponse>* PrepareAsyncUpdateOneRaw(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFSingleResponse>* AsyncDeleteOneRaw(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::phxpf::PhxPFSingleResponse>* PrepareAsyncDeleteOneRaw(::grpc::ClientContext* context, const ::phxpf::PhxPFSingleOperator& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::phxpf::PhxIAmMaster>* AsyncIsMasterRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::phxpf::PhxIAmMaster>* PrepareAsyncIsMasterRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Filter_;
    const ::grpc::internal::RpcMethod rpcmethod_Update_;
    const ::grpc::internal::RpcMethod rpcmethod_Delete_;
    const ::grpc::internal::RpcMethod rpcmethod_FilterOne_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateOne_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteOne_;
    const ::grpc::internal::RpcMethod rpcmethod_IsMaster_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Filter(::grpc::ServerContext* context, const ::phxpf::PhxPFOperator* request, ::phxpf::PhxPFResponse* response);
    virtual ::grpc::Status Update(::grpc::ServerContext* context, const ::phxpf::PhxPFOperator* request, ::phxpf::PhxPFResponse* response);
    virtual ::grpc::Status Delete(::grpc::ServerContext* context, const ::phxpf::PhxPFOperator* request, ::phxpf::PhxPFResponse* response);
    virtual ::grpc::Status FilterOne(::grpc::ServerContext* context, const ::phxpf::PhxPFSingleOperator* request, ::phxpf::PhxPFSingleResponse* response);
    virtual ::grpc::Status UpdateOne(::grpc::ServerContext* context, const ::phxpf::PhxPFSingleOperator* request, ::phxpf::PhxPFSingleResponse* response);
    virtual ::grpc::Status DeleteOne(::grpc::ServerContext* context, const ::phxpf::PhxPFSingleOperator* request, ::phxpf::PhxPFSingleResponse* response);
    virtual ::grpc::Status IsMaster(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::phxpf::PhxIAmMaster* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Filter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Filter() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Filter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Filter(::grpc::ServerContext* context, const ::phxpf::PhxPFOperator* request, ::phxpf::PhxPFResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFilter(::grpc::ServerContext* context, ::phxpf::PhxPFOperator* request, ::grpc::ServerAsyncResponseWriter< ::phxpf::PhxPFResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Update() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::phxpf::PhxPFOperator* request, ::phxpf::PhxPFResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::phxpf::PhxPFOperator* request, ::grpc::ServerAsyncResponseWriter< ::phxpf::PhxPFResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Delete() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::phxpf::PhxPFOperator* request, ::phxpf::PhxPFResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::phxpf::PhxPFOperator* request, ::grpc::ServerAsyncResponseWriter< ::phxpf::PhxPFResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FilterOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_FilterOne() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_FilterOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FilterOne(::grpc::ServerContext* context, const ::phxpf::PhxPFSingleOperator* request, ::phxpf::PhxPFSingleResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFilterOne(::grpc::ServerContext* context, ::phxpf::PhxPFSingleOperator* request, ::grpc::ServerAsyncResponseWriter< ::phxpf::PhxPFSingleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateOne() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UpdateOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOne(::grpc::ServerContext* context, const ::phxpf::PhxPFSingleOperator* request, ::phxpf::PhxPFSingleResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOne(::grpc::ServerContext* context, ::phxpf::PhxPFSingleOperator* request, ::grpc::ServerAsyncResponseWriter< ::phxpf::PhxPFSingleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteOne() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_DeleteOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOne(::grpc::ServerContext* context, const ::phxpf::PhxPFSingleOperator* request, ::phxpf::PhxPFSingleResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteOne(::grpc::ServerContext* context, ::phxpf::PhxPFSingleOperator* request, ::grpc::ServerAsyncResponseWriter< ::phxpf::PhxPFSingleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IsMaster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_IsMaster() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_IsMaster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsMaster(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::phxpf::PhxIAmMaster* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsMaster(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::phxpf::PhxIAmMaster>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Filter<WithAsyncMethod_Update<WithAsyncMethod_Delete<WithAsyncMethod_FilterOne<WithAsyncMethod_UpdateOne<WithAsyncMethod_DeleteOne<WithAsyncMethod_IsMaster<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Filter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Filter() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Filter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Filter(::grpc::ServerContext* context, const ::phxpf::PhxPFOperator* request, ::phxpf::PhxPFResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Update() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::phxpf::PhxPFOperator* request, ::phxpf::PhxPFResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Delete() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::phxpf::PhxPFOperator* request, ::phxpf::PhxPFResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FilterOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_FilterOne() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_FilterOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FilterOne(::grpc::ServerContext* context, const ::phxpf::PhxPFSingleOperator* request, ::phxpf::PhxPFSingleResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateOne() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UpdateOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOne(::grpc::ServerContext* context, const ::phxpf::PhxPFSingleOperator* request, ::phxpf::PhxPFSingleResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteOne() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_DeleteOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOne(::grpc::ServerContext* context, const ::phxpf::PhxPFSingleOperator* request, ::phxpf::PhxPFSingleResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IsMaster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_IsMaster() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_IsMaster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsMaster(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::phxpf::PhxIAmMaster* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Filter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Filter() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::phxpf::PhxPFOperator, ::phxpf::PhxPFResponse>(std::bind(&WithStreamedUnaryMethod_Filter<BaseClass>::StreamedFilter, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Filter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Filter(::grpc::ServerContext* context, const ::phxpf::PhxPFOperator* request, ::phxpf::PhxPFResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFilter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::phxpf::PhxPFOperator,::phxpf::PhxPFResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Update() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::phxpf::PhxPFOperator, ::phxpf::PhxPFResponse>(std::bind(&WithStreamedUnaryMethod_Update<BaseClass>::StreamedUpdate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::phxpf::PhxPFOperator* request, ::phxpf::PhxPFResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::phxpf::PhxPFOperator,::phxpf::PhxPFResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Delete() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::phxpf::PhxPFOperator, ::phxpf::PhxPFResponse>(std::bind(&WithStreamedUnaryMethod_Delete<BaseClass>::StreamedDelete, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::phxpf::PhxPFOperator* request, ::phxpf::PhxPFResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::phxpf::PhxPFOperator,::phxpf::PhxPFResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FilterOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_FilterOne() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::phxpf::PhxPFSingleOperator, ::phxpf::PhxPFSingleResponse>(std::bind(&WithStreamedUnaryMethod_FilterOne<BaseClass>::StreamedFilterOne, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_FilterOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FilterOne(::grpc::ServerContext* context, const ::phxpf::PhxPFSingleOperator* request, ::phxpf::PhxPFSingleResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFilterOne(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::phxpf::PhxPFSingleOperator,::phxpf::PhxPFSingleResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateOne() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::phxpf::PhxPFSingleOperator, ::phxpf::PhxPFSingleResponse>(std::bind(&WithStreamedUnaryMethod_UpdateOne<BaseClass>::StreamedUpdateOne, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateOne(::grpc::ServerContext* context, const ::phxpf::PhxPFSingleOperator* request, ::phxpf::PhxPFSingleResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateOne(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::phxpf::PhxPFSingleOperator,::phxpf::PhxPFSingleResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteOne() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::phxpf::PhxPFSingleOperator, ::phxpf::PhxPFSingleResponse>(std::bind(&WithStreamedUnaryMethod_DeleteOne<BaseClass>::StreamedDeleteOne, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteOne(::grpc::ServerContext* context, const ::phxpf::PhxPFSingleOperator* request, ::phxpf::PhxPFSingleResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteOne(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::phxpf::PhxPFSingleOperator,::phxpf::PhxPFSingleResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IsMaster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_IsMaster() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::google::protobuf::Empty, ::phxpf::PhxIAmMaster>(std::bind(&WithStreamedUnaryMethod_IsMaster<BaseClass>::StreamedIsMaster, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_IsMaster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IsMaster(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::phxpf::PhxIAmMaster* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIsMaster(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::phxpf::PhxIAmMaster>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Filter<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_FilterOne<WithStreamedUnaryMethod_UpdateOne<WithStreamedUnaryMethod_DeleteOne<WithStreamedUnaryMethod_IsMaster<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Filter<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_FilterOne<WithStreamedUnaryMethod_UpdateOne<WithStreamedUnaryMethod_DeleteOne<WithStreamedUnaryMethod_IsMaster<Service > > > > > > > StreamedService;
};

}  // namespace phxpf


#endif  // GRPC_phxpf_2eproto__INCLUDED
